@startuml
!define DARKBLUE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

package server {
package menager {
    class Server <extends Thread>{
        -port: int
        -running: boolean
        -socketServer: ServerSocket
        ..
        -players: List<Player>
        -games: List<Game>
        -currentPlayerId: int
        -currentGameId: int
        --
        +Server(port: int)
        +isRunning(): boolean
        +close()
        +run()
        +newGame(properties: JSONObject): Game
        +findGame(id: int): Game
        +removeGame(game: Game)
        +removePlayer(player: Player)
        -newPlayer(socket: Socket)
        -initServer()
    }

    class GameBuilderDirector {
        -builder : GameBuilder
        --
        +build(server: Server, id: int, properties: JSONObject): Game
        -changeBuilder(GameBuilder)
    }

    interface GameBuilder <<interface>> {
            +build(JSONObject): Game
    }

    class Player <extends Thread>{
        -id: int
        -game: Game
        -running: boolean
        ..
        -server: Server
        -socket: Socket
        -in: BufferedReader
        -out: PrintWriter
        --
        +Player(server: Server, id: int, socket: Socket)
        +getPlayerId(): int
        +close()
        +run()
        +respond(message: String)
        +respond(message: JSONObject)
        +joinGame(Game)
        -handleRequest(request: JSONObject)
    }

    abstract class Game <<abstract>> {
        -server: Server
        -id: int
        ..
        #playerCount: int
        #players: List<Player>
        #adminId: int
        #started: boolean
        --
        +Game(server: Server, id: int)
        +getId(): int
        +join(player: Player): boolean
        +leave(player Player)
        +action(player: Player, action: JSONObject)
        +option(player: Player, option: JSONObject)
        #getGameInfo(): JSONObject
        #sendToAll(message: JSONObject)
        #sendToAll(message: String)
    }
    }

package sternhalma {
    class Sternhalma{
        -currentPlayerId: int
        -board: Board
        --
        +Sternhalma(server: Server, id: int)
        +setBoard(board: Board)
        +setPlayerCount(int: playerCount): boolean
        +option(JSONObject)
        +action(JSONObject)
        #getGameInfo(): JSONObject
        -endGame()
    }

    class SternhalmaBuilder {
        -game: Sternhalma
        --
        +build(JSONObject): Game
        -buildBoard(JSONObject): Board
        -buildGameMaster(JSONObject): GameMaster
    }

    class Board{
        -type : int
        -playerCount : int
        -currentPlayer: int
        -GameMaster: GameMaster
        #pones : List<Pone>
        #fields : List<Field>
        ..
        -boardStatus JSONObject
        -statusFlag boolean
        --
        +Board(type: int, List<Pone>, List<Field>)
        +setGameMaster(GameMaster)
        +startGame(players: List<Player>)
        +move(fx: int,fy: int,tx: int,ty: int,player: int) : boolean
        +endTurn(): boolean
        +getBoardStatus(): JSONObject
        +getType(): int
    }

    class GameMaster {
        -ruleSet: List<Rule>
        -board: Board
        -moveCount: int
        -lastPlayer: int
        --
        +GameMaster(board: Board)
        +addRule(rule: Rule)
        +isValid(from: Pone, to: Field, player: int): boolean
        +hasWon(player: Player): boolean
    }

    interface Rule <<interface>> {
        isValid(from: Pone, to: Field, player: int, move: int): int
    }
    note right
    checkMove returns
     0 if rule doesn't apply
     1 if move is valid
    -1 if move is invalid
    end note

    class OnePerRoundRule{
    }
    class BasicMoveRule{
    }
    class JumpMoveRule{
    }
    class LockedMoveRule{
    }

    class Field{
        #x : int
        #y : int
        #player : int
        #adjacent: Field[6]
        #currentPone: Pone
        --
        +Field(int, int, int)
        +setAdjacent(Field[6])
    }
    class Pone{
        #x : int
        #y : int
        #player: int
        #currentFiled : Field
        --
        +Pone(int, int, int)
        +changeFiled(Field)
    }
}
}

    Server - GameBuilderDirector
    GameBuilderDirector *-- GameBuilder
    GameBuilder <|- SternhalmaBuilder

    Server *-- Player
    Server *--- Game
    Player --o Game
    Game <|--- Sternhalma

    SternhalmaBuilder - Sternhalma
    SternhalmaBuilder -- Board
    SternhalmaBuilder -- GameMaster

    Sternhalma  *-- Board
    GameMaster -* Board
    Board *-- Field
    Board *-- Pone

    GameMaster *-- Rule
    Pone - Rule
    Field - Rule
    Rule <|--- OnePerRoundRule
    Rule <|--- BasicMoveRule
    Rule <|--- JumpMoveRule
    Rule <|--- LockedMoveRule

@enduml